(ql:quickload :graph)
(ql:quickload :str)
(ql:quickload :alexandria)

(let* ((lines (uiop:read-file-lines "12.input"))
       (width (length (car lines)))
       (nmap (apply #'str:concat lines)))
  (flet ((path-length (start)
           (loop for i from 0 to (1- (length nmap))
                 with edges = (list)
                 do (flet ((check-neighbour (n)
                             (if (and (>= n 0)
                                      (< n (length nmap))
                                      (not (or (and (eq (rem i width) 0) (eq n (1- i)))
                                               (and (eq (rem n width) 0) (eq i (1- n)))))
                                      (flet ((elevation (p)
                                               (cond ((eq #\S p) (char-code #\a))
                                                     ((eq #\E p) (char-code #\z))
                                                     (t (char-code p)))))
                                        (or (>= (elevation (char nmap i)) (elevation (char nmap n)))
                                            (eq (elevation (char nmap i)) (1- (elevation (char nmap n)))))))
                                 (push (cons (list i n) 1)
                                       edges))))
                      (when (not (eq i (position #\E nmap)))
                        (dolist (n (list (- i width) (+ i width) (1- i) (1+ i)))
                          (check-neighbour n))))
                 finally (return (let ((g (graph:populate (make-instance 'graph:digraph)
                                                          :nodes (alexandria:iota (1- (length nmap)))
                                                          :edges-w-values edges)))
                                   (length (graph:shortest-path g start (position #\E nmap))))))))
    (print (path-length (position #\S nmap)))
    (print (loop for i from 0 to (1- (length nmap))
                 when (eq (char nmap i) #\a)
                   minimizing (let ((pl (path-length i)))
                                (if (eq 0 pl) 9999 pl))))))
