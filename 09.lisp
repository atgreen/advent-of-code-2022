(setf *moves* '(((2 . 0) . (1 . 0)) ((2 . -1) . (1 . -1)) ((2 . 1) . (1 . 1))
                ((0 . 2) . (0 . 1)) ((-1 . 2) . (-1 . 1)) ((1 . 2) . (1 . 1))
                ((-2 . 0) . (-1 . 0)) ((-2 . 1) . (-1 . 1)) ((-2 . -1) . (-1 . -1))
                ((0 . -2) . (0 . -1)) ((1 . -2) . (1 . -1)) ((-1 . -2) . (-1 . -1))
                ((-2 . -2) . (-1 . -1)) ((2 . 2) . (1 . 1))
                ((-2 . 2) . (-1 . 1)) ((2 . -2) . (1 . -1))))

(flet ((star (knots)
         (let ((mtable (make-hash-table :test #'equal))
               (tail-visit-table (make-hash-table :test #'equal))
               (input (uiop:read-file-lines "09.input"))
               (head '(0 . 0)))
           (loop for m in *moves* do (setf (gethash (car m) mtable) (cdr m)))
           (flet ((follow-knot (head pos)
                    (let* ((distance (cons (- (car head) (car pos)) (- (cdr head) (cdr pos))))
                           (pos-adj (gethash distance mtable)))
                      (if pos-adj
                          (cons (+ (car pos) (car pos-adj))
                                (+ (cdr pos) (cdr pos-adj)))
                          pos))))
             (loop for move in input
                   do (let ((head-adj (assoc (char move 0) '((#\R . (0 . 1)) (#\L . (0 . -1)) (#\U . (-1 . 0)) (#\D . (1 . 0))))))
                        (dotimes (i (parse-integer (subseq move 1)))
                          (setf head (cons (+ (car head) (car (cdr head-adj)))
                                           (+ (cdr head) (cdr (cdr head-adj)))))
                          (setf knots (let ((klist (list)))
                                        (reduce (lambda (head tail)
                                                  (let ((k (follow-knot head tail)))
                                                    (setf klist (append klist (list k)))
                                                    k))
                                                knots
                                                :initial-value head)
                                        klist))
                          (setf (gethash (last knots) tail-visit-table) 1)))))
           (hash-table-count tail-visit-table))))
  (print (star '((0 . 0))))
  (print (star '((0 . 0) (0 . 0) (0 . 0) (0 . 0) (0 . 0) (0 . 0) (0 . 0) (0 . 0) (0 . 0)))))
