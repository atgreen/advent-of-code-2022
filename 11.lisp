(ql:quickload :split-sequence)

(defclass monkey ()
  ((number :initarg :number)
   (items :initarg :items)
   (operation :initarg :operation)
   (divisor :initarg :divisor)
   (true-target :initarg :true-target)
   (false-target :initarg :false-target)
   (i-count :initform 0)))

(flet ((star (rounds divcalc)
         (let ((lines (uiop:read-file-lines "11.input")))
           (let ((monkeys (loop with monkey = 0
                                until (not lines)
                                collect (progn
                                          (pop lines)
                                          (let* ((items (read-from-string (format nil "(~A)" (remove #\: (remove #\, (remove-if #'alpha-char-p (pop lines)))))))
                                                 (operation (let ((ops (split-sequence:split-sequence #\Space (pop lines) :start 19)))
                                                              (eval (read-from-string (format nil "(lambda (old) (~A ~A ~A))" (nth 1 ops) (car ops) (nth 2 ops))))))
                                                 (divisor (parse-integer (car (last (split-sequence:split-sequence #\Space (pop lines))))))
                                                 (true-target (parse-integer (car (last (split-sequence:split-sequence #\Space (pop lines))))))
                                                 (false-target (parse-integer (car (last (split-sequence:split-sequence #\Space (pop lines)))))))
                                            (pop lines)
                                            (make-instance 'monkey :number (1- (incf monkey)) :items items :operation operation :divisor divisor :true-target true-target :false-target false-target))))))
             (setf tmod (apply #'lcm (mapcar (lambda (m) (slot-value m 'divisor)) monkeys)))
             (dotimes (i rounds)
               (dolist (monkey monkeys)
                 (with-slots (items operation divisor true-target false-target i-count) monkey
                   (dolist (item items)
                     (incf i-count)
                     (let ((new-worry (if divcalc (floor (funcall operation item) 3)
                                                  (mod (funcall operation item) tmod))))
                       (if (eq (rem new-worry divisor) 0)
                           (setf (slot-value (nth true-target monkeys) 'items) (append (slot-value (nth true-target monkeys) 'items) (list new-worry)))
                           (setf (slot-value (nth false-target monkeys) 'items) (append (slot-value (nth false-target monkeys) 'items) (list new-worry))))
                       (setf items nil))))))
             (let ((smonkeys (sort monkeys (lambda (m1 m2) (> (slot-value m1 'i-count) (slot-value m2 'i-count))))))
               (* (slot-value (car smonkeys) 'i-count) (slot-value (cadr smonkeys) 'i-count)))))))
  (print (star 20 t))
  (print (star 10000 nil)))
