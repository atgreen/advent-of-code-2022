(ql:quickload :str)

(let ((fs (make-hash-table :test #'equal))
      (cwd ""))
  (setf (gethash "" fs) 0)
  (dolist (line (cdr (uiop:read-file-lines "07.input")))
    (cond ((digit-char-p (aref line 0))
           (setf (gethash cwd fs) (+ (gethash cwd fs) (parse-integer line :junk-allowed t))))
          ((str:starts-with? "$ cd .." line)
           (setf cwd (subseq cwd 0 (position #\/ cwd :from-end t))))
          ((str:starts-with? "$ cd " line)
           (setf cwd (concatenate 'string cwd "/" (subseq line 5)))
           (setf (gethash cwd fs) 0))))
  (let ((dirs (list)))
    (maphash (lambda (dir size) (push dir dirs)) fs)
    (dolist (dir (sort dirs (lambda (a b) (> (count #\/ a) (count #\/ b)))))
      (unless (equal dir "")
        (incf (gethash (subseq dir 0 (position #\/ dir :from-end t)) fs) (gethash dir fs)))))
  (let ((sum 0))
    (maphash (lambda (dir size)
               (incf sum (if (<= size 100000) size 0)))
             fs)
    (print sum))

  (let ((needed-space (- 30000000 (- 70000000 (gethash "" fs))))
        (closest-dir nil)
        (closest-space 70000000))
    (maphash (lambda (dir size)
               (let ((s (- size needed-space)))
                 (if (and (> s 0) (< s closest-space))
                   (setf closest-dir dir))))
             fs)
    (print (gethash closest-dir fs))))
