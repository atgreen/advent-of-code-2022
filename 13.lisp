(flet ((listify (s) (substitute #\Space #\, (substitute #\( #\[ (substitute #\) #\] s)))))
  (labels ((compare (left right)
             (block cblock
               (cond
                 ((and (null left) (null right)) nil)
                 ((null left) 1)
                 ((null right) 0)
                 ((and (numberp left) (numberp right))
                  (cond ((eq left right) nil)
                        ((< left right) 1)
                        ((> left right) 0)))
                 ((and (listp left) (listp right))
                  (loop for i from 0 to (1- (length left))
                        do (progn
                             (let ((c (compare (nth i left) (nth i right))))
                               (when (numberp c)
                                 (return-from cblock c))))
                        finally (return (if (< (length left) (length right))
                                            1
                                            nil))))
                 ((and (listp left) (numberp right))
                  (compare left (list right)))
                 ((and (numberp left) (listp right))
                  (compare (list left) right))))))
    (let ((lines (uiop:read-file-lines "13.input")))
      (print (loop while lines
                   with index = 1
                   sum (let* ((left (read-from-string (listify (pop lines))))
                              (right (read-from-string (listify (pop lines)))))
                         (pop lines)
                         (incf index)
                         (if (eq 1 (compare left right)) (1- index) 0)))))
    (let* ((lines (mapcar (lambda (l)
                            (read-from-string (listify l)))
                          (append '("[[2]]" "[[6]]")
                                   (remove "" (uiop:read-file-lines "13.input") :test #'equal))))
           (slines (sort lines (lambda (l r) (eq (compare l r) 1)))))
      (flet ((match-packets (a b)
               (string= (format nil "~A" a) (format nil "~A" b))))
        (print (* (1+ (position '((2)) slines :test #'match-packets))
                  (1+ (position '((6)) slines :test #'match-packets))))))))
